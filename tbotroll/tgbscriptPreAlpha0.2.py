#!/bin/python3
import telebot
import requests
import json
import os

global nInfo1
global nInfo2
groupFile = "Groups.txt"
subjectFile = "Subjects.txt"
sGroupFile = "sGroups.txt"
urlFile = "urls.txt"
dUpdate_text = "–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã - —É–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤\n\n"
dOpen_text = "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª—ã - –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n\n"
dCancel_text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
rGroup_text = "–ì—Ä—É–ø–ø—ã - —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, —É—á–∞—â–∏—Ö—Å—è —É —Ç–µ–±—è\n\n"
rSubject_text = "–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã - —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω, —á—Ç–æ —Ç—ã –≤–µ–¥—ë—à—å\n\n"
rLink_text = "–°—Å—ã–ª–∫–∏ - —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥–æ–∫–∏ —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ\n\n"
rCancel_text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
unresolved_message = "–ù–∞ –≤—Å—è–∫—É—é —Ö—Ä–µ–Ω—å –Ω–µ –æ—Ç–≤–µ—á–∞—é, —è–∫–æ–±—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —á—É–≤—Å—Ç–≤ –ø—Ä–æ—è–≤–ª—è—é, –æ—Å–∫–æ—Ä–±–ª—è—Ç—å –Ω–µ —Å—Ç–æ–∏—Çüóøüóøüóø"
turl = 'http://worldtimeapi.org/api/timezone/Europe/Moscow'


class isheet:
    """
    rc_mark: a marks that we will sent
    tid: sheets'es id
    sid: sheet's name
    surl: sheet's api url
    google_token: a token that can used in refresh token
    tgbot_token: a bot's token, nothing interesting
    """
    rc_mark = {'–ü', '–ù', '–ë', '–û'}
    tid = ''
    sid1 = '1—Å–µ–º-–û—Å–µ–Ω—å'
    sid2 = '2—Å–µ–º-–í–µ—Å–Ω–∞'
    google_token = '1//0ckdqe3fJ4-LRCgYIARAAGAwSNwF-L9IrmPKSdeA2eL0DzmYocxM9J5oENiVZZzcfSix2f9DtcdmC89OJbimZdoWiSuCfu5ikeVc'
    tgbot_token = "1277500164:AAEkU8DbjZX0E6wRa3JDKUKumIjlOuSLsRM"
    url_token = "https://oauth2.googleapis.com/token"
    gclient_id = "173493138930-85ifhekbvi7iak312hvbcok3f8466hn6.apps.googleusercontent.com"
    gclient_secret = "wVPZmRRZquXcrcZ53Ygryj7C"
    ALPHABET = ['F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
                'AA', 'AB']

    def __init__(self, access_token):
        self.acc_token = access_token


class get_new_token:
    payload = f"client_id={isheet.gclient_id}&client_secret={isheet.gclient_secret}" \
              f"&grant_type=refresh_token&refresh_token={isheet.google_token}"
    headers = {
        'charset': 'UTF-8',
        'Content-Type': 'application/x-www-form-urlencoded'
    }


'''–ú–µ–∂–º–µ–Ω—é—à–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã'''
tg = telebot.TeleBot(isheet.tgbot_token)
keyboard_main_menu = telebot.types.ReplyKeyboardMarkup()
keyboard_main_remove = telebot.types.ReplyKeyboardRemove()
keyboard_main_menu.row('–ù–∞—á–∞—Ç—å')
keyboard_main_menu.add('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤', '–ó–∞–∫—Ä—ã—Ç—å')
keyboard_update_menu = telebot.types.ReplyKeyboardMarkup()
keyboard_update_remove = telebot.types.ReplyKeyboardRemove()
keyboard_update_menu.row("–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã", "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª—ã")
keyboard_update_menu.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "")
keyboard_read_menu = telebot.types.ReplyKeyboardMarkup()
keyboard_read_remove = telebot.types.ReplyKeyboardRemove()
keyboard_read_menu.row("–ì—Ä—É–ø–ø—ã", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã")
keyboard_read_menu.add("–°—Å—ã–ª–∫–∏", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
keyboard_roll_call = telebot.types.ReplyKeyboardMarkup()
keyboard_roll_call.row("–ï—Å—Ç—å")
keyboard_roll_call.add("–ù–µ—Ç—É")
keyboard_roll_call.add("–ë–æ–ª–µ–µ—Ç")
keyboard_roll_call.add("–û—Ç—á–∏—Å–ª–µ–Ω")
keyboard_roll_call.add("–û—Ç–º–µ–Ω–∞")
'''–ö–ª–∞–≤—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞'''


def addFile(Groups, Subjests, sGroups, Urls):
    print('–∞ —ç—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏...')
    _Groups = json.loads(Groups.text)
    _Subjests = json.loads(Subjests.text)
    _sGroups = json.loads(sGroups.text)
    _Urls = json.loads(Urls.text)
    ff1 = _Groups['values'][1:]
    with open(f"iFiles/{groupFile}", "w+") as file:
        print(ff1)
        for line in ff1:
            f = " ".join(line)
            file.write(f + '\n')
    file.close()
    ff2 = _Subjests['values'][1:]
    with open(f"iFiles/{subjectFile}", "w+") as file:
        print(ff2)
        for line in ff2:
            f = " ".join(line)
            file.write(f + '\n')
    file.close()
    ff3 = _sGroups['values'][1:]
    with open(f"iFiles/{sGroupFile}", "w+") as file:
        print(ff3)
        for line in ff3:
            f = " ".join(line)
            file.write(f + '\n')
    file.close()
    ff4 = _Urls['values'][1:]
    with open(f"iFiles/{urlFile}", "w+") as file:
        print(ff4)
        for line in ff4:
            f = " ".join(line)
            file.write(f + '\n')
    file.close()


@tg.message_handler(commands=['test'])
def time_test(message):
    # users = [['02-09-20', '09-09-20', '16-09-20'], ['–ü–†–ö', '–ü–†–ö', '–ü–†–ö'], ['1', '1', '1'], ['1', '1', '1'],
    #          ['1', '1', '–ë'],
    #          ['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1'], ['1', '–ë', '1'], ['1', '1', '1'],
    #          ['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1'], ['–ë', '–ë', '–ë'],
    #          ['13', '12', '12', '0', '0', '0', '0'],
    #          ['100%', '100%', '100%', '#DIV/0!', '#DIV/0!', '#DIV/0!', '#DIV/0!'],
    #          [], ['', 'KPI –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏'], ['', '2 - 85-100% –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∏ –ª–∞–±'], ['', '1 - 51-84% –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∏ –ª–∞–±'],
    #          ['', '0 - –º–µ–Ω—å—à–µ 50% –∏ –º–µ–Ω—å—à–µ 50% –ª–∞–±']]
    # testRequest = requests.get(turl)
    # testJSON = json.loads(testRequest.text)['utc_datetime']
    # a = testJSON.rpartition('T')[0]
    # b = users[1][-1]  # –≤—Å—Ç–∞–≤–ª—è—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ
    # c = len(users[1])  # –Ω–æ–º–µ—Ä –±—É–∫–≤—ã –≤ –º–æ–µ–º –∞–ª—Ñ–∞–≤–∏—Ç–µ
    # print(b, '\n', c)
    # print(isheet.ALPHABET[c])

    global ist
    asdf = [['–§–ò–û', '–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è', '–ê–±—Ä–∞–º–µ–Ω–∫–æ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤ –ú–∞—Ä–∫', '–ì—Ä–∞—á–µ–≤ –ò–≤–∞–Ω', '–î—É–¥–∞—Ä–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ï—Ä–µ–º–∏–Ω –ó–∞—Ö–∞—Ä', '–ó–∞—Ä–µ—Ü–∫–∞—è –î–∞—Ä—å—è', '–ò–≤–∞–Ω–æ–≤–∞ –û–ª—å–≥–∞', '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ö–æ—Ä–æ—Ç–∫–æ–≤ –î–∞–Ω–∏–ª', '–ú–∞—Ä—É—Å–∏—á –ê–ª–µ–∫—Å–µ–π', '–ü–µ—Ç–µ–Ω–µ–≤ –ú–∞–∫—Å–∏–º', '–°–≤–∏—Ä–∏–¥–æ–≤ –ú–∞–∫—Å–∏–º', '–Æ–ø–∞—Ç–æ–≤ –ú–∞–∫—Å–∏–º ', '–Æ—Ä—Ü–µ–≤–∏—á –ï–≥–æ—Ä', '–í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ –ø–∞—Ä–µ', '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å']]
    asdfg = asdf[0][2:][:-2]
    try:
            checkpoint = tg.send_message(message.chat.id, f"{asdfg[ist]}", reply_markup=keyboard_roll_call)
            # tg.register_next_step_handler(checkpoint, sf)
    except:
        print(f'{asdfg[13]}')

    ist += 1


# def sf(sfmessage):
#     sfid = sfmessage.chat.id
#     arstudents.append([f"{sfmessage.text}"])
#     print(arstudents)
#     time_test(sfmessage)




@tg.message_handler(commands=['get_token'])
def gtoken(message):
    rtest = requests.request("POST", isheet.url_token, headers=get_new_token.headers, data=get_new_token.payload)
    prtest = json.loads(rtest.text)
    access_token = prtest['access_token']
    print(access_token)
    return access_token


@tg.message_handler(commands=['start', 'cancel'])
def sendFirstMessage(message):
    global access_token
    fStartText = "–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Ä–∞–±–æ—Ç—É\n"
    mid = message.chat.id
    dirList = list(os.listdir("iFiles"))
    if urlFile in dirList:
        gmsg = tg.send_message(mid, f"{fStartText}\n–§–∞–π–ª—ã –≤ –ø–æ—Ä—è–¥–∫–µ, –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å", reply_markup=keyboard_main_menu)
        tg.register_next_step_handler(gmsg, main_choice_menu)
    else:
        bmsg = tg.send_message(mid, f"{fStartText}\n–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ"
                                    f"—Å—Å—ã–ª–∫—É –Ω–∞ –¢–∞–±–ª–∏—Ü—É, –≤–≤–µ–¥—è —Å—Å—ã–ª–∫—É –≤"
                                    f"–ø–æ–ª–µ –≤–≤–æ–¥–∞, –æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏–∂–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è"
                                    f"–ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–æ—Å—Ç—É–ø –∫ –¢–∞–±–ª–∏—Ü–µ —É "
                                    f"–±–æ—Ç–∞ –∏–º–µ–µ—Ç—Å—è, —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏ –∏–º–µ–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π "
                                    f"–∞–π–¥–∏ –¢–∞–±–ª–∏—Ü—ã", reply_markup=keyboard_main_remove)
        access_token = gtoken(message)
        tg.register_next_step_handler(bmsg, getUrl)


def delete_files(umessage):
    uid = umessage.chat.id
    os.remove(f"iFiles/{groupFile}")
    os.remove(f"iFiles/{subjectFile}")
    os.remove(f"iFiles/{sGroupFile}")
    os.remove(f"iFiles/{urlFile}")
    checkpoint = tg.send_message(uid, "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
    tg.register_next_step_handler(checkpoint, main_setting_menu)


def main_setting_menu(smessage):
    sid = smessage.chat.id
    if smessage.text == "–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã":
        delete_files(smessage)
    elif smessage.text == "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª—ã":
        checkpoint = tg.send_message(sid, "–í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤", reply_markup=keyboard_read_menu)
        tg.register_next_step_handler(checkpoint, read_files)
    elif smessage.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        sendFirstMessage(smessage)

    else:
        checkpoint = tg.send_message(sid, unresolved_message)
        tg.register_next_step_handler(checkpoint, main_setting_menu)


def read_files(message):
    rid = message.chat.id
    if message.text == "–ì—Ä—É–ø–ø—ã":
        if os.path.isfile(f'iFiles/{groupFile}'):
            rGroup = open(f'iFiles/{groupFile}', 'r')
            rgStr = ''.join(rGroup.readlines())
            rGroup.close()
            if rgStr:
                checkpoint = tg.send_message(rid, rgStr)
            else:
                checkpoint = tg.send_message(rid, "–§–∞–π–ª –ø—É—Å—Ç")

        else:
            checkpoint = tg.send_message(rid, "–§–∞–π–ª–∞ –Ω–µ—Ç—É")
        tg.register_next_step_handler(checkpoint, read_files)
    elif message.text == "–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã":
        if os.path.isfile(f'iFiles/{subjectFile}'):
            rSubject = open(f'iFiles/{subjectFile}', 'r')
            rsStr = ''.join(rSubject.readlines())
            rSubject.close()
            if rsStr:
                checkpoint = tg.send_message(rid, rsStr)
            else:
                checkpoint = tg.send_message(rid, "–§–∞–π–ª –ø—É—Å—Ç")

        else:
            checkpoint = tg.send_message(rid, "–§–∞–π–ª–∞ –Ω–µ—Ç—É")
        tg.register_next_step_handler(checkpoint, read_files)
    elif message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        sendFirstMessage(message)
    elif message.text == "–°—Å—ã–ª–∫–∏":
        if os.path.isfile(f'iFiles/{subjectFile}'):
            rUrl = open(f'iFiles/{urlFile}', 'r')
            ruStr = ''.join(rUrl.readlines())
            rUrl.close()
            if ruStr:
                checkpoint = tg.send_message(rid, ruStr)
            else:
                checkpoint = tg.send_message(rid, "–§–∞–π–ª –ø—É—Å—Ç")

        else:
            checkpoint = tg.send_message(rid, "–§–∞–π–ª–∞ –Ω–µ—Ç—É")
        tg.register_next_step_handler(checkpoint, read_files)
    else:
        checkpoint = tg.send_message(rid, unresolved_message)
        tg.register_next_step_handler(checkpoint, read_files)


# rSubject = open(f'iFiles/{subjectFile}', 'r')
# rsGroup = open(f'iFiles/{sGroupFile}', 'r')


def choose_sheet(mid, includeData):
    try:
        idResult = requests.get(includeData)
        sheetsList = []
        idJSON = json.loads(idResult.text)
        for i in range(len(idJSON['sheets'])):
            sheetsList.append(idJSON['sheets'][i]['properties']['title'])
        print(sheetsList)
        inline_keyboard_choice_sheet = telebot.types.ReplyKeyboardMarkup()
        for i in range(len(sheetsList)):
            inline_keyboard_choice_sheet.add(f"{sheetsList[i]}")
        checkpoint = tg.send_message(mid, "–≠—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞—ë—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏—Å—Ö–æ–¥—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–¥–µ–ª–∞–Ω–Ω–æ–≥–æ"
                                          " –∑–∞–ø—Ä–æ—Å–∞, –ø–æ—Å–ª–µ –Ω–µ–≥–æ –º—ã –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞ –∫–∞–∫–æ–π –ª–∏—Å—Ç"
                                          " –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–∫–æ–≥–æ "
                                          "–ª–∏—Å—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã", reply_markup=inline_keyboard_choice_sheet)
        tg.register_next_step_handler(checkpoint, load_sheet)
    except:
        checkpoint = tg.send_message(mid, f"–û—à–∏–±–∫–∞ {idResult.status_code}, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑"
                                          f"—á–µ—Ä–µ–∑ /start")


def load_sheet(message):
    lid = message.chat.id
    lsheet_name = message.text
    tg.send_message(lid, f"–ù—É {lsheet_name} —Ç–∞–∫ {lsheet_name}")
    try:
        surl1 = f"https://sheets.googleapis.com/v4/spreadsheets/{tid}/values/{lsheet_name}"
        tg.send_message(lid, "–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏...")
        rGroup = requests.get(f"{surl1}!A:A?access_token={access_token}")
        rSubject = requests.get(f"{surl1}!B:B?access_token={access_token}")
        rLink = requests.get(f"{surl1}!C:C?access_token={access_token}")
        rShortGroup = requests.get(f"{surl1}!D:D?access_token={access_token}")
        if rLink.status_code == 200:
            addFile(rGroup, rSubject, rShortGroup, rLink)
            tg.send_message(lid, "–£—Å–ø–µ—à–Ω–æ")
            sendFirstMessage(message)
    except:
        checkpoint = tg.send_message(lid, f"–ù–µ —É—Å–ø–µ—à–Ω–æ, {rLink.status_code}, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
        tg.register_next_step_handler(checkpoint, load_sheet)


def main_choice_menu(call):
    cid = call.chat.id
    if call.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤":
        checkpoint = tg.send_message(cid, dUpdate_text + dOpen_text + dCancel_text, reply_markup=keyboard_update_menu)
        tg.register_next_step_handler(checkpoint, main_setting_menu)
    elif call.text == "–ù–∞—á–∞—Ç—å":
        # checkpoint = tg.send_message(cid, rGroup_text + rSubject_text + rLink_text + rCancel_text,
        #                              reply_markup=keyboard_read_menu)
        choose_subject(call)
    elif call.text == "–ó–∞–∫—Ä—ã—Ç—å":
        tg.send_message(cid, "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –ø—Ä–æ–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ /start",
                        reply_markup=keyboard_main_remove)
    else:
        checkpoint = tg.send_message(cid, unresolved_message)
        tg.register_next_step_handler(checkpoint, main_choice_menu)


def load_sheet_roll_call(message):
    global arstudents
    arstudents = []
    global ist
    ist = 0
    lid = message.chat.id
    lsheet_name = message.text
    tg.send_message(lid, f"–ù—É {lsheet_name} —Ç–∞–∫ {lsheet_name}")
    print(uid)
    tg.send_message(lid, "–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏...")
    try:
        surl1 = f"https://sheets.googleapis.com/v4/spreadsheets/{uid}/values/{lsheet_name}"
        rGroup = requests.get(f"{surl1}!F:AO?access_token={access_token}&majorDimension=ROWS")
        users = json.loads(rGroup.text)['values']
        testRequest = requests.get(turl)
        testJSON = json.loads(testRequest.text)['utc_datetime']
        a = testJSON.rpartition('T')[0]
        b = users[1][-1]  # –≤—Å—Ç–∞–≤–ª—è—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        c = len(users[1])  # –Ω–æ–º–µ—Ä –±—É–∫–≤—ã –≤ –º–æ–µ–º –∞–ª—Ñ–∞–≤–∏—Ç–µ
        print(b, '\n', c)
        print(isheet.ALPHABET[c])
        rstudents = requests.get(f"{surl1}!C:C?access_token={access_token}&majorDimension=COLUMNS")
        stJSON = json.loads(rstudents.text)['values']
        students = stJSON[0][2:][:-2]
        def send_ed_time(ca):
            edurl = f"https://sheets.googleapis.com/v4/spreadsheets/{uid}/values/{lsheet_name}!{isheet.ALPHABET[c]}2" \
                  f"?valueInputOption=RAW&access_token={access_token}"

            edpayload = f"{{\r\n    'range': '{lsheet_name}!{isheet.ALPHABET[ca]}2',\r\n    'majorDimension': 'ROWS',\r\n" \
                      f"    \r\n    'values': [['{b}']]\r\n}}"
            edheaders = {
                'Content-Type': 'application/json'
            }
            response = requests.request("PUT", edurl, headers=edheaders, data=edpayload.encode('utf-8'))

            timeurl = f"https://sheets.googleapis.com/v4/spreadsheets/{uid}/values/{lsheet_name}!{isheet.ALPHABET[ca]}1" \
                    f"?valueInputOption=RAW&access_token={access_token}"

            timepayload = f"{{\r\n    'range': '{lsheet_name}!{isheet.ALPHABET[ca]}1',\r\n    'majorDimension': 'ROWS',\r\n" \
                        f"    \r\n    'values': [['{a}']]\r\n}}"
            timeheaders = {
                'Content-Type': 'application/json'
            }
            response = requests.request("PUT", timeurl, headers=timeheaders, data=timepayload.encode('utf-8'))

        send_ed_time(c)

    except:
        surl1 = f"https://sheets.googleapis.com/v4/spreadsheets/{uid}/values/{lsheet_name}"
        rGroup = requests.get(f"{surl1}!F:AO?access_token={access_token}&majorDimension=ROWS")
        users = json.loads(rGroup.text)['values']
        testRequest = requests.get(turl)
        testJSON = json.loads(testRequest.text)['utc_datetime']
        a = testJSON.rpartition('T')[0]
        b = "–•"  # –≤—Å—Ç–∞–≤–ª—è—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        c = len(users[1])  # –Ω–æ–º–µ—Ä –±—É–∫–≤—ã –≤ –º–æ–µ–º –∞–ª—Ñ–∞–≤–∏—Ç–µ
        print(b, '\n', c)
        print(isheet.ALPHABET[c])
        rstudents = requests.get(f"{surl1}!C:C?access_token={access_token}&majorDimension=COLUMNS")
        stJSON = json.loads(rstudents.text)['values']
        students = stJSON[0][2:][:-2]

        def send_ed_time():
            edurl = f"https://sheets.googleapis.com/v4/spreadsheets/{uid}/values/{lsheet_name}!{isheet.ALPHABET[0]}2" \
                    f"?valueInputOption=RAW&access_token={access_token}"

            edpayload = f"{{\r\n    'range': '{lsheet_name}!{isheet.ALPHABET[0]}2',\r\n    'majorDimension': 'ROWS',\r\n" \
                        f"    \r\n    'values': [['{b}']]\r\n}}"
            edheaders = {
                'Content-Type': 'application/json'
            }
            response = requests.request("PUT", edurl, headers=edheaders, data=edpayload.encode('utf-8'))

            timeurl = f"https://sheets.googleapis.com/v4/spreadsheets/{uid}/values/{lsheet_name}!{isheet.ALPHABET[0]}1" \
                      f"?valueInputOption=RAW&access_token={access_token}"

            timepayload = f"{{\r\n    'range': '{lsheet_name}!{isheet.ALPHABET[0]}1',\r\n    'majorDimension': 'ROWS',\r\n" \
                          f"    \r\n    'values': [['{a}']]\r\n}}"
            timeheaders = {
                'Content-Type': 'application/json'
            }
            response = requests.request("PUT", timeurl, headers=timeheaders, data=timepayload.encode('utf-8'))
        send_ed_time()

    def sf(sfmessage):
            sfid = sfmessage.chat.id
            if sfmessage.text == "–ï—Å—Ç—å":
                arstudents.append(["1"])
                start()
            elif sfmessage.text == "–ù–µ—Ç—É":
                arstudents.append(["0"])
                start()
            elif sfmessage.text == "–ë–æ–ª–µ–µ—Ç":
                arstudents.append(["–ë"])
                start()
            elif sfmessage.text == "–û—Ç—á–∏—Å–ª–µ–Ω":
                arstudents.append(["X"])
                start()
            elif sfmessage.text == "–û—Ç–º–µ–Ω–∞":
                sendFirstMessage(sfmessage)
            print(arstudents)

    def start():
        global i, ist
        try:
            checkpoint = tg.send_message(message.chat.id, f"{students[ist]}\n{ist + 1} –∏–∑ {len(students)}", reply_markup=keyboard_roll_call)
            tg.register_next_step_handler(checkpoint, sf)
        except:
            length_student = len(students) + 2
            print(arstudents)
            print(length_student)
            edurl = f"https://sheets.googleapis.com/v4/spreadsheets/{uid}/values/{lsheet_name}!{isheet.ALPHABET[c]}3:{isheet.ALPHABET[c]}" \
                    f"{length_student}" \
                    f"?valueInputOption=USER_ENTERED&access_token={access_token}"

            edpayload = f"{{\r\n    'range': '{lsheet_name}!{isheet.ALPHABET[c]}3:{isheet.ALPHABET[c]}{length_student}'," \
                        f"\r\n    'majorDimension': 'ROWS',\r\n" \
                        f"    \r\n    'values': {arstudents}\r\n}}"
            edheaders = {
                'Content-Type': 'application/json'
            }
            response = requests.request("PUT", edurl, headers=edheaders, data=edpayload.encode('utf-8'))
            sendFirstMessage(message)
        ist += 1
    start()




# def sendRollCall(message):


def getUrl(gmessage):
    global irul
    mid = gmessage.chat.id
    global tid
    tid = '/'.join(gmessage.text.split('/')[5:][:-1])
    print(tid)
    includeData = f"https://sheets.googleapis.com/v4/spreadsheets/{tid}" \
                  f"?includeGridData=True&access_token={access_token}"
    choose_sheet(mid, includeData)


def choose_subject(message):
    cid = message.chat.id
    keyboard_choose_group = telebot.types.ReplyKeyboardMarkup()
    if os.path.isfile(f'iFiles/{subjectFile}'):
        cGroup = open(f"iFiles/{groupFile}")
        cSubject = open(f"iFiles/{subjectFile}")
        csGroup = open(f"iFiles/{sGroupFile}")
        cUrl = open(f"iFiles/{urlFile}")
        clGroup = cGroup.readlines()
        clSubject = cSubject.readlines()
        clsGroup = csGroup.readlines()
        clUrl = cUrl.readlines()
        for i in range(len(clGroup)):
            if clGroup[i].strip() and clSubject[i].strip() and clsGroup[i].strip() and clUrl[i].strip():
                keyboard_choose_group.add(f"{clsGroup[i]}")
        keyboard_choose_group.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        cGroup.close()
        cSubject.close()
        csGroup.close()
        cUrl.close()
        checkpoint = tg.send_message(cid, "–í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, –∑–¥–µ—Å—å –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤ –Ω–∞–ª–∏—á–∏–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ "
                                          "—Ç–∞–±–ª–∏—Ü—É —Å –Ω–µ–π", reply_markup=keyboard_choose_group)
        tg.register_next_step_handler(checkpoint, getGroup)
    else:
        tg.send_message(cid, "–§–∞–π–ª–æ–≤ –Ω–µ—Ç:/")
        sendFirstMessage(message)


def getGroup(message):
    global number_of_link
    gid = message.chat.id
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        sendFirstMessage(message)
    else:
        user_choice = message.text + "\n"
        if os.path.isfile(f'iFiles/{subjectFile}'):
            cGroup = open(f"iFiles/{groupFile}")
            cSubject = open(f"iFiles/{subjectFile}")
            csGroup = open(f"iFiles/{sGroupFile}")
            cUrl = open(f"iFiles/{urlFile}")
            clsGroup = csGroup.readlines()
            clUrl = cUrl.readlines()
            print(clsGroup)
            print(user_choice)
            if user_choice in clsGroup:
                asdf = clsGroup.index(user_choice)
                urUrl = clUrl[asdf]
                getUrl_roll_call(message, urUrl)
            else:
                checkpoint = tg.send_message(gid, "–Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É"
                                                  ", –≤–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", reply_markup=keyboard_main_remove)
                sendFirstMessage(message)
            cGroup.close()
            cSubject.close()
            csGroup.close()
            cUrl.close()

            # tg.register_next_step_handler(checkpoint, getGroup)
        else:
            tg.send_message(gid, "–§–∞–π–ª–æ–≤ –Ω–µ—Ç:/")
            sendFirstMessage(message)


def choose_sheet_roll_call(mid, includeData):
    try:
        idResult = requests.get(includeData)
        sheetsList = []
        idJSON = json.loads(idResult.text)
        for i in range(len(idJSON['sheets'])):
            sheetsList.append(idJSON['sheets'][i]['properties']['title'])
        print(sheetsList)
        inline_keyboard_choice_sheet = telebot.types.ReplyKeyboardMarkup()
        for i in range(len(sheetsList)):
            inline_keyboard_choice_sheet.add(f"{sheetsList[i]}")
        inline_keyboard_choice_sheet.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        checkpoint = tg.send_message(mid, "–í—ã–±–µ—Ä–∏ –ª–∏—Å—Ç/–≥—Ä—É–ø–ø—É",
                                     reply_markup=inline_keyboard_choice_sheet)
        tg.register_next_step_handler(checkpoint, load_sheet_roll_call)
    except:
        checkpoint = tg.send_message(mid, f"–û—à–∏–±–∫–∞ {idResult.status_code}, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ "
                                          f"—á–µ—Ä–µ–∑ /start")


def getUrl_roll_call(message, urUrl):
    global access_token
    access_token = gtoken(message)
    rcid = message.chat.id
    global uid
    uid = '/'.join(urUrl.split('/')[5:][:-1])
    includeData = f"https://sheets.googleapis.com/v4/spreadsheets/{uid}" \
                  f"?includeGridData=True&access_token={access_token}"
    choose_sheet_roll_call(rcid, includeData)


tg.polling()
